---
# ----------------------------------------
# Проверка переменных и ОС
# ----------------------------------------

- name: Debug merged variables
  ansible.builtin.debug:
    msg:
      - "opt_lv_size: {{ opt_lv_size }}"
      - "memory_limit_percent: {{ memory_limit_percent }}"
      - "cpu_limit_percent: {{ cpu_limit_percent }}"

- name: Check that memory_limit_percent and cpu_limit_percent do not exceed 100%
  ansible.builtin.assert:
    that:
      - memory_limit_percent | int <= 100
      - cpu_limit_percent | int <= 100
    fail_msg: >
      Invalid resource limits: memory_limit_percent={{ memory_limit_percent }},
      cpu_limit_percent={{ cpu_limit_percent }}. Both must be <= 100.

- name: Ensure OS is Rocky Linux 9
  ansible.builtin.assert:
    that:
      - ansible_distribution == "Rocky"
      - ansible_distribution_major_version | int == 9
    fail_msg: "Target host must be Rocky Linux 9"

# ----------------------------------------
# Получаем фактический размер LVM /home
# ----------------------------------------

- name: Get current LV size for /home using lvs command
  ansible.builtin.command: "lvs --noheadings --units g -o LV_SIZE --nosuffix /dev/rl/home"
  register: lvm_home_raw

- name: Set fact for current LV size as float
  ansible.builtin.set_fact:
    lvm_home_size_g: "{{ lvm_home_raw.stdout | trim | float }}"

# ----------------------------------------
# Baseline размер сохраняем при первом запуске
# ----------------------------------------

- name: Check if baseline file exists
  ansible.builtin.stat:
    path: /etc/myrole_home_initial_size.yml
  register: baseline_file

- name: Save baseline LV size (one-time)
  ansible.builtin.copy:
    dest: /etc/myrole_home_initial_size.yml
    content: |
      ---
      home_lv_baseline_size: {{ lvm_home_size_g }}
  when: not baseline_file.stat.exists

- name: Set fact home_lv_baseline_size (when new)
  ansible.builtin.set_fact:
    home_lv_baseline_size: "{{ lvm_home_size_g }}"
  when: not baseline_file.stat.exists

- name: Read baseline LV size from file on remote host
  ansible.builtin.command: "cat /etc/myrole_home_initial_size.yml"
  register: baseline_raw
  when: baseline_file.stat.exists

- name: Parse baseline file as vars
  ansible.builtin.set_fact:
    baseline_vars: "{{ baseline_raw.stdout | from_yaml }}"
  when: baseline_file.stat.exists

- name: Set fact home_lv_baseline_size as float
  ansible.builtin.set_fact:
    home_lv_baseline_size: "{{ baseline_vars.home_lv_baseline_size | float }}"
  when: baseline_file.stat.exists

# ----------------------------------------
# Вычисляем целевой размер и расширяем /home
# ----------------------------------------

- name: Calculate new home LV size (+10G to baseline)
  ansible.builtin.set_fact:
    new_home_size: "{{ '%dG' | format(((home_lv_baseline_size | float) + 10) | round(0, 'ceil') | int) }}"

- name: Check if current LV size >= new size
  ansible.builtin.set_fact:
    needs_resize: "{{ (lvm_home_size_g | float) < ((home_lv_baseline_size | float) + 10) }}"

- name: Extend home LV to new size if needed
  community.general.lvol:
    vg: rl
    lv: home
    size: "{{ new_home_size }}"
    resizefs: true
  when: needs_resize

# ----------------------------------------
# Создаём LV для /opt (идемпотентно)
# ----------------------------------------

- name: Check if /opt LV already exists
  ansible.builtin.command: "lvs --noheadings -o lv_name /dev/rl"
  register: lvs_output

- name: Set fact if /opt LV exists
  ansible.builtin.set_fact:
    opt_lv_exists: "{{ 'opt' in (lvs_output.stdout_lines | map('trim') | list) }}"

- name: Create LV for /opt if not exists
  community.general.lvol:
    vg: rl
    lv: opt
    size: "{{ opt_lv_size }}"
  when: not opt_lv_exists

- name: Check filesystem type for /opt LV
  ansible.builtin.command: "blkid -o value -s TYPE /dev/rl/opt"
  register: opt_fs_type
  failed_when: false
  changed_when: false

- name: Format LV /opt as XFS if not already formatted
  ansible.builtin.filesystem:
    fstype: xfs
    dev: "/dev/rl/opt"
  when: opt_fs_type.stdout == ""

# ----------------------------------------
# Монтируем /opt и прописываем fstab
# ----------------------------------------

- name: Ensure /opt directory exists
  ansible.builtin.file:
    path: /opt
    state: directory

- name: Mount /opt and ensure fstab entry
  ansible.posix.mount:
    path: /opt
    src: "/dev/rl/opt"
    fstype: xfs
    opts: defaults
    state: mounted

# ----------------------------------------
# Создаём пользователя и копируем daemon
# ----------------------------------------

- name: Create myuser
  ansible.builtin.user:
    name: myuser
    home: /opt/daemon
    create_home: yes
    shell: /bin/bash

- name: Copy mydaemon binary
  ansible.builtin.copy:
    src: mydaemon
    dest: /opt/daemon/mydaemon
    owner: myuser
    group: myuser
    mode: '0755'

# ----------------------------------------
# Расчёт лимитов ресурсов
# ----------------------------------------

- name: Calculate memory and CPU limits
  ansible.builtin.set_fact:
    total_mem_gb: "{{ ((ansible_memtotal_mb / 1024) * (memory_limit_percent / 100)) | round(0, 'ceil') | int }}"
    cpu_cores: "{{ [(ansible_processor_vcpus * (cpu_limit_percent / 100)) | round(0, 'ceil') | int, 1] | max }}"

# ----------------------------------------
# Конфиг и systemd
# ----------------------------------------

- name: Create mydaemon.cfg from template
  ansible.builtin.template:
    src: mydaemon.cfg.j2
    dest: /opt/daemon/mydaemon.cfg
    owner: myuser
    group: myuser
    mode: '0644'

- name: Create systemd service unit file
  ansible.builtin.template:
    src: mydaemon.service.j2
    dest: /etc/systemd/system/mydaemon.service
    mode: '0644'

- name: Reload systemd
  ansible.builtin.systemd:
    daemon_reload: true

- name: Enable and start mydaemon service
  ansible.builtin.systemd:
    name: mydaemon.service
    enabled: yes
    state: started

